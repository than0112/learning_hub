#include<iostream>
using namespace std;
int main(){
    int n;
    cout << "請輸入一個正整數：";
    cin >> n;
    cout << "輸入的數字倒轉為：";
    // 檢查輸入是否為正整數
    while(n>0){
        cout<<n%10; // 輸出最後一位數字
        n /= 10; // 去掉最後一位數字
    }
    cout << endl; // 換行
    return 0;
}


/*
核心邏輯：

取個位數：使用模數運算子 (% 10) 可以得到一個數字的最後一位數。

例如：62073 % 10 的結果是 3。

移除個位數：使用整數除法 (/ 10) 可以有效地「砍掉」一個數字的最後一位數。

例如：62073 / 10 的結果是 6207。

循環條件：不斷重複以上兩個步驟，直到這個數字變為 0 為止，此時 while (n > 0) 的條件不再成立，迴圈結束。

圖片中的範例追蹤 (n = 62073)：

第一次迴圈：n = 62073。取出 3，n 變為 6207。

第二次迴圈：n = 6207。取出 7，n 變為 620。

第三次迴圈：n = 620。取出 0，n 變為 62。

第四次迴圈：n = 62。取出 2，n 變為 6。

第五次迴圈：n = 6。取出 6，n 變為 0。

結束：n 現在是 0，while (n > 0) 條件為假，迴圈停止。
*/

//補充小概念
/*
使用 cin 作為 while 迴圈的條件式
核心邏輯：

在 C++ 中，cin >> 變數 這個運算式在執行完讀取操作後，會回傳 cin 物件本身。

當 cin 物件被放在需要布林值（true 或 false）的地方時，例如 while 迴圈的條件中，它會自動轉換成一個布林狀態。

如果讀取成功，它會被視為 true，迴圈繼續。

如果讀取失敗（例如：要求輸入數字但使用者輸入了英文字母，或者遇到了檔案結尾 EOF），它會被視為 false，迴圈結束。

用途：

這個技巧主要用於需要重複讀取不定數量資料的情境，直到沒有資料可讀為止。

範例：while (cin >> x >> y)

這段程式碼會不斷地提示使用者輸入兩個由空白隔開的值，並分別存入 x 和 y。

只要使用者持續輸入有效的資料，迴圈就會一直執行。

如何結束迴圈 (手動觸發「檔案結尾 EOF」)：

 Ctrl + Z 是在 Windows 系統的命令提示字元中，用來模擬輸入結束的方法。

在 Linux 或 macOS 的終端機中，則是使用 Ctrl + D。

逗號運算子 , 的用法：
 while (cout << "...", i = 0, cin >> x >> y) 展示了逗號運算子的用法。

逗號運算子會依序執行左邊到右邊的每一個表達式，並以最右邊的表達式 (cin >> x >> y) 的結果作為整個條件的最終結果。

因此，這行程式碼會在每次迴圈開始時，先印出提示訊息，再將 i 設為 0，最後才執行 cin 來判斷迴圈是否繼續。這是一種比較 C 語言風格的緊湊寫法。



*/