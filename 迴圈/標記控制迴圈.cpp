/*
標記控制迴圈 (Sentinel-Controlled Loop) 是一種不知道確切執行次數的迴圈，它會不斷地重複處理資料，直到讀取到一個預先定義好的特殊「標記值」(sentinel value) 為止。

這個「標記值」就像是一個信號或哨兵，它的唯一目的就是告訴迴圈：「資料已經結束了，可以停止了。」

## 一個生活化的比喻 🚂
把它想像成一列很長的貨運火車：

每一節貨物車廂：代表你要處理的正常資料（例如：學生成績、商品價格）。

火車的最後一節：掛上了一節顏色鮮豔、與眾不同的「守車」(Caboose)。

你 (迴圈)：是車站的卸貨員。

你的工作指令不是「卸 50 節車廂」，而是「持續卸貨，直到你看見那節紅色的守車為止」。你事先不知道有多少節貨物車廂，但你知道看到守車就該停下來。

在這個比喻中，那節紅色的「守車」就是標記值 (sentinel value)。當你看到它時，就知道所有貨物都已經卸完，可以結束工作了。
*/


//## C++ 實作範例
//目標：寫一個程式，讓使用者可以輸入任意數量的學生成績，程式會計算總分與平均，直到使用者輸入 -1 為止。
//在這裡，-1 就是我們的標記值，因為學生成績不可能是負數，所以它是一個絕佳的信號。

#include <iostream>
#include <iomanip> // 為了 setprecision

using namespace std;

int main() {
    int score;
    int count = 0;   // 用來計算輸入了幾個成績
    double sum = 0.0; // 用來累計總分

    // 清楚地告訴使用者如何結束輸入
    cout << "請輸入學生成績，當輸入完畢後，請輸入 -1 來結束：" << endl;

    // 讀取第一個成績
    cin >> score;

    // 只要輸入的成績不是標記值 -1，迴圈就繼續
    while (score != -1) {
        sum += score; // 累加分數
        count++;      // 增加計數

        // 繼續讀取下一個成績
        cout << "請輸入下一個成績 (輸入 -1 結束): ";
        cin >> score;
    }

    cout << "---------------------------------" << endl;

    // 檢查是否有輸入成績，避免除以零的錯誤
    if (count > 0) {
        double average = sum / count;
        cout << "你總共輸入了 " << count << " 個成績。" << endl;
        cout << "總分為: " << sum << endl;
        cout << "平均分數為: " << fixed << setprecision(2) << average << endl;
    } else {
        cout << "沒有輸入任何成績。" << endl;
    }

    return 0;
}

/*程式碼解說
while (score != -1)：這是迴圈的核心。它在每次循環開始前，都會檢查變數score的值是否為 -1。只要不是 -1，迴圈就會一直執行。

預先讀取：在迴圈開始前讀取一次 cin >> score;並在迴圈內部的結尾再讀取一次。這種「先讀一次，再在迴圈末尾讀下一次」的結構是標記控制迴圈的經典寫法。
## 核心特點總結
迴圈次數不固定：與 for (int i = 0; i < 10; i++) 這種事先知道要跑 10 次的「計數控制迴圈」不同，標記控制迴圈的執行次數由使用者的輸入決定。
依賴特殊值結束：標記值必須是正常資料範圍之外的值，否則程式會提前結束。
適用情境：當你需要處理數量未知的連續輸入時，例如使用者手動輸入一連串數字、或讀取檔案直到某個特定標記為止
 */