#include <iostream>
#include <iomanip> // 為了使用 setw 來美化排版
using namespace std;

int main()
{
    // --- 變數宣告 ---
    // i, j: 迴圈計數器
    // n: 三角形的大小 (總共 6 行)
    // p[n][n]: 一個 n x n 的二維陣列，用來儲存巴斯卡三角形的數值。
    //           `={}` 會將陣列所有元素都初始化為 0。
    int i, j, n = 6, p[n][n] = {};

    // --- 初始化第一行 ---
    // 設定第一行 (索引為0) 的前兩個元素為 1。
    // 注意：這是一個非標準的巴斯卡三角形開頭，標準的開頭只有一個 1。
    // 這個設定會導致整個三角形的係數像是從標準的第二行 (1, 1) 開始往下產生。
    p[0][0] = p[0][1] = 1;

    // --- 計算巴斯卡三角形 ---
    // 外層迴圈，從第二行 (索引為1) 開始，逐行計算
    for (i = 1; i < n; i++) {
        // 根據規則，每一行的第一個元素永遠是 1
        p[i][0] = 1;
        
        // 內層迴圈，計算該行的其他元素
        // j 的範圍確保能計算出所有非零的係數
        for (j = 1; j <= i + 1; j++) {
            // 巴斯卡三角形的核心規則：
            // 當前元素的值 = 上一行左上方的元素 + 上一行正上方的元素
            p[i][j] = p[i-1][j-1] + p[i-1][j];
        }
    }
    
    // --- 輸出結果 ---
    // 外層迴圈，逐行印出
    for (i = 0; i < n; i++) {
        // 內層迴圈，印出該行的每一個元素
        for (j = 0; j < n; j++) {
            // 為了讓圖形呈現三角形，只印出不是 0 的值
            if (p[i][j] != 0) {
                // 使用 setw(5) 設定固定寬度為 5 個字元，讓數字能對齊
                cout << setw(5) << p[i][j];
            }
        }
        // 每印完一行就換行
        cout << endl;
    }
    return 0;
}